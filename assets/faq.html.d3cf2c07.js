import{_ as c}from"./apiPreview.c276709c.js";import{_ as d}from"./multiFileUpload.5c76966c.js";import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as h,c as u,a as e,b as t,d as a,w as n,e as l,r}from"./app.e3afebec.js";const f="/fast-request/img/skill/urlError_en.png",g={},m=e("p",null,"Keywords meaning",-1),k=e("hr",null,null,-1),y=e("p",null,"We will constantly update the problems encountered by developers and the corresponding solutions.",-1),_={class:"table-of-contents"},v=e("h2",{id:"s-url-error",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#s-url-error","aria-hidden":"true"},"#"),a(" S: Url error")],-1),w=e("p",null,[e("img",{src:f,alt:"urlError",loading:"lazy"})],-1),x=l(`<ol><li>Configure the correct domain name and enable the 2 drop-down boxes for the project and environment</li><li>Set the correct URL, for example, to replace the variable {id} on the URL, you can replace the variable in the Path Param tab</li></ol><h2 id="s-how-to-ignore-the-field-of-the-entity" tabindex="-1"><a class="header-anchor" href="#s-how-to-ignore-the-field-of-the-entity" aria-hidden="true">#</a> S: How to ignore the field of the entity</h2><p>Way 1: Use one of the following 2 annotations.</p><div class="language-text" data-ext="text"><pre class="language-text"><code>com.fasterxml.jackson.annotation.JsonIgnore

com.alibaba.fastjson.annotation.JSONField(serialize = false)
</code></pre></div><p>Way 2: Add the <code>static</code> modifier to the field.</p><h2 id="s-quick-locate" tabindex="-1"><a class="header-anchor" href="#s-quick-locate" aria-hidden="true">#</a> S: Quick locate</h2><p>After getting the focus of the window or pop-up box, enter the letters to position, then use the <code>↑</code> arrow or the <code>↓</code> arrow for jump position</p><p>For example:</p><p><img src="`+c+'" alt="apiDocExample" loading="lazy"></p><h2 id="s-multi-file-upload" tabindex="-1"><a class="header-anchor" href="#s-multi-file-upload" aria-hidden="true">#</a> S: Multi-file upload</h2><p>Enter multiple values and set the field type to file</p><p><img src="'+d+'" alt="multiFileUpload" loading="lazy"></p><h2 id="s-pass-text-plain-param-in-body" tabindex="-1"><a class="header-anchor" href="#s-pass-text-plain-param-in-body" aria-hidden="true">#</a> S: Pass text/plain param in body</h2><p>Please add <strong>Content-Type: text/plain</strong> in the header</p>',14),b=e("code",null,"Common header",-1),q=e("h2",{id:"s-no-controller-how-to-send-a-request",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#s-no-controller-how-to-send-a-request","aria-hidden":"true"},"#"),a(" S: No controller, how to send a request")],-1),A=l('<h2 id="s-api-doc-sync" tabindex="-1"><a class="header-anchor" href="#s-api-doc-sync" aria-hidden="true">#</a> S: API doc sync</h2><p>When you modify your method, the API returned from the APIs list is the API saved before you update it. At this time, if you want to ensure that the online API document is your modified one, you need to click <svg class="icon svg-icon" aria-hidden="true"><use xlink:href="#icon-saveNew"></use></svg>(save) or click <svg class="icon svg-icon" aria-hidden="true"><use xlink:href="#icon-restfulFastRequest"></use></svg> again and then sync api doc.</p><p>Recommendation: There is no need to create a repo in Github, Gitee, and Gitlab in advance. Plug-ins will automatically help create a repo. Developers only need to provide the repo name.</p><h2 id="s-apis-echo" tabindex="-1"><a class="header-anchor" href="#s-apis-echo" aria-hidden="true">#</a> S: APIs echo</h2>',4),S=e("svg",{class:"icon svg-icon","aria-hidden":"true"},[e("use",{"xlink:href":"#icon-saveNew"})],-1),P=e("svg",{class:"icon svg-icon","aria-hidden":"true"},[e("use",{"xlink:href":"#icon-regenerate"})],-1),I=l(`<blockquote><p>Please ensure that click <code>save button</code> <svg class="icon svg-icon" aria-hidden="true"><use xlink:href="#icon-saveNew"></use></svg> every time you modify api params.</p></blockquote><h2 id="q-left-icon-missing" tabindex="-1"><a class="header-anchor" href="#q-left-icon-missing" aria-hidden="true">#</a> Q: Left icon missing</h2><p>Left icon <svg class="icon svg-icon" aria-hidden="true"><use xlink:href="#icon-restfulFastRequest"></use></svg> missing.</p><p><strong>A:</strong> Open config <code>setting-&gt;Editor-&gt;Gutter icons-&gt;show gutter icon</code></p><h2 id="q-after-entering-the-parameters-the-api-call-found-that-the-parameters-were-invalid" tabindex="-1"><a class="header-anchor" href="#q-after-entering-the-parameters-the-api-call-found-that-the-parameters-were-invalid" aria-hidden="true">#</a> Q: After entering the parameters, the API call found that the parameters were invalid</h2><p><strong>A:</strong> Plugin version less than <mark>2022.2.3</mark>, when editing a value in the table, you need to <mark>click in the blank space</mark> after editing the value, then send the request. The bug has been fixed in the 2022.2.3+ version.</p><h2 id="q-why-the-plugin-doesn-t-respond" tabindex="-1"><a class="header-anchor" href="#q-why-the-plugin-doesn-t-respond" aria-hidden="true">#</a> Q: Why the plugin doesn&#39;t respond</h2><p><strong>A:</strong> Please configure the relevant configuration according to the steps introduced in the first chapter first, and then click the icon.</p><h2 id="q-idea-freezes-after-clicking-the-fastrequest-icon" tabindex="-1"><a class="header-anchor" href="#q-idea-freezes-after-clicking-the-fastrequest-icon" aria-hidden="true">#</a> Q: Idea freezes after clicking the fastRequest icon</h2><p><strong>A:</strong> :The entity class you designed is nested and recursive, the plugin does not support.</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">B</span> b<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> xx<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">A</span> a<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> xx<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>If you don&#39;t need the B property in the above case, then you can manually add a static keywords to property B when generating</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">B</span> b<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> xx<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,13);function Q(R,j){const o=r("Badge"),s=r("router-link"),i=r("RouterLink");return h(),u("div",null,[e("blockquote",null,[m,t(o,{text:"S: Skill",color:"#087CFA"}),a(),t(o,{text:"Q: Question",color:"#FE2857"}),a(),t(o,{text:"A: Answer",color:"#21D789"}),k,y]),e("nav",_,[e("ul",null,[e("li",null,[t(s,{to:"#s-url-error"},{default:n(()=>[a("S: Url error")]),_:1})]),e("li",null,[t(s,{to:"#s-how-to-ignore-the-field-of-the-entity"},{default:n(()=>[a("S: How to ignore the field of the entity")]),_:1})]),e("li",null,[t(s,{to:"#s-quick-locate"},{default:n(()=>[a("S: Quick locate")]),_:1})]),e("li",null,[t(s,{to:"#s-multi-file-upload"},{default:n(()=>[a("S: Multi-file upload")]),_:1})]),e("li",null,[t(s,{to:"#s-pass-text-plain-param-in-body"},{default:n(()=>[a("S: Pass text/plain param in body")]),_:1})]),e("li",null,[t(s,{to:"#s-no-controller-how-to-send-a-request"},{default:n(()=>[a("S: No controller, how to send a request")]),_:1})]),e("li",null,[t(s,{to:"#s-api-doc-sync"},{default:n(()=>[a("S: API doc sync")]),_:1})]),e("li",null,[t(s,{to:"#s-apis-echo"},{default:n(()=>[a("S: APIs echo")]),_:1})]),e("li",null,[t(s,{to:"#q-left-icon-missing"},{default:n(()=>[a("Q: Left icon missing")]),_:1})]),e("li",null,[t(s,{to:"#q-after-entering-the-parameters-the-api-call-found-that-the-parameters-were-invalid"},{default:n(()=>[a("Q: After entering the parameters, the API call found that the parameters were invalid")]),_:1})]),e("li",null,[t(s,{to:"#q-why-the-plugin-doesn-t-respond"},{default:n(()=>[a("Q: Why the plugin doesn't respond")]),_:1})]),e("li",null,[t(s,{to:"#q-idea-freezes-after-clicking-the-fastrequest-icon"},{default:n(()=>[a("Q: Idea freezes after clicking the fastRequest icon")]),_:1})])])]),v,w,t(o,{text:"Solution",type:"tip"}),x,e("p",null,[a("Consider using add header by "),t(i,{to:"/en/guide/features/commonHeader.html"},{default:n(()=>[b]),_:1})]),q,e("p",null,[a("Refer to "),t(i,{to:"/en/guide/features/tempRequest.html"},{default:n(()=>[a("Temporary request")]),_:1})]),A,e("p",null,[a("For the saved API, you modify it again, and you need manually fill in the parameters and save "),S,a(" it. If you don't want the parameters you saved before at all, you can just click "),P,a("("),t(i,{to:"/guide/features/regenerate.html"},{default:n(()=>[a("Re generate")]),_:1}),a(").")]),I])}const C=p(g,[["render",Q],["__file","faq.html.vue"]]);export{C as default};
