import{_ as c}from"./apiPreview.c276709c.js";import{_ as d}from"./multiFileUpload.5c76966c.js";import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as u,c as h,a,b as e,d as s,w as n,e as i,r}from"./app.e3afebec.js";const _="/fast-request/img/skill/urlError.png",k={},g=a("p",null,"关键字含义",-1),f=a("hr",null,null,-1),x=a("p",null,"我们将持续更新开发者遇到的问题以及解决方案",-1),m={class:"table-of-contents"},v=a("h2",{id:"s-url-错误",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#s-url-错误","aria-hidden":"true"},"#"),s(" S: Url 错误")],-1),b=a("p",null,[a("img",{src:_,alt:"urlError",loading:"lazy"})],-1),y=i(`<ol><li>配置正确的域名，并启用项目和环境2个下拉框</li><li>设置正确的url，例如需要将url上的变量{id}替换，可以在Path Param tab中替换变量</li></ol><h2 id="s-解析如何忽略某个字段" tabindex="-1"><a class="header-anchor" href="#s-解析如何忽略某个字段" aria-hidden="true">#</a> S: 解析如何忽略某个字段</h2><p>方式1： 使用如下2种注解中的一种</p><div class="language-text" data-ext="text"><pre class="language-text"><code>com.fasterxml.jackson.annotation.JsonIgnore

com.alibaba.fastjson.annotation.JSONField(serialize = false)
</code></pre></div><p>方式2： 给字段增加 <code>static</code> 修饰符</p><h2 id="s-快速定位" tabindex="-1"><a class="header-anchor" href="#s-快速定位" aria-hidden="true">#</a> S: 快速定位</h2><p>获取到窗口或者弹出框焦点以后，输入需要搜索的字母，快读定位，然后使用<code>↑</code>箭头或者<code>↓</code>箭头进行跳跃定位</p><p>例如:</p><p><img src="`+c+'" alt="apiDocExample" loading="lazy"></p><h2 id="s-多文件上传" tabindex="-1"><a class="header-anchor" href="#s-多文件上传" aria-hidden="true">#</a> S: 多文件上传</h2><p>输入多个值并将字段类型设置为 file</p><p><img src="'+d+'" alt="multiFileUpload" loading="lazy"></p><h2 id="s-body-中想直接传-text" tabindex="-1"><a class="header-anchor" href="#s-body-中想直接传-text" aria-hidden="true">#</a> S: Body 中想直接传 text</h2><p>在 header 中加入<strong>Content-Type: text/plain</strong></p>',14),q=a("h2",{id:"s-没有-controller-如何发送请求",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#s-没有-controller-如何发送请求","aria-hidden":"true"},"#"),s(" S: 没有 Controller，如何发送请求")],-1),w=i('<h2 id="s-api文档同步" tabindex="-1"><a class="header-anchor" href="#s-api文档同步" aria-hidden="true">#</a> S: API文档同步</h2><p>当你修改了你的接口参数，从APIs列表双击回来的api是你未更新前保存的API，此时你想保证在线API文档是你修改后的， 需要再点一下 <svg class="icon svg-icon" aria-hidden="true"><use xlink:href="#icon-saveNew"></use></svg>(保存) 或者左侧图标 <svg class="icon svg-icon" aria-hidden="true"><use xlink:href="#icon-restfulFastRequest"></use></svg> ,再进行同步。</p><p>建议：不需要提前在Github、Gitee、Gitlab创建仓库，插件自动会帮助创建，开发者只需要提供仓库名就行</p><h2 id="s-apis回显" tabindex="-1"><a class="header-anchor" href="#s-apis回显" aria-hidden="true">#</a> S: APIs回显</h2>',4),A=a("svg",{class:"icon svg-icon","aria-hidden":"true"},[a("use",{"xlink:href":"#icon-regenerate"})],-1),S=i('<blockquote><p>请确保你每次修改参数后点击<code>保存</code><svg class="icon svg-icon" aria-hidden="true"><use xlink:href="#icon-saveNew"></use></svg>按钮</p></blockquote><h2 id="q-左侧图标不显示" tabindex="-1"><a class="header-anchor" href="#q-左侧图标不显示" aria-hidden="true">#</a> Q: 左侧图标不显示</h2><p>左侧图标<svg class="icon svg-icon" aria-hidden="true"><use xlink:href="#icon-restfulFastRequest"></use></svg>不显示。</p><p><strong>A:</strong> 打开配置 <code>setting-&gt;Editor-&gt;Gutter icons-&gt;show gutter icon</code></p><h2 id="q-输入参数后调用-api-发现无效" tabindex="-1"><a class="header-anchor" href="#q-输入参数后调用-api-发现无效" aria-hidden="true">#</a> Q: 输入参数后调用 API 发现无效</h2><p><strong>A:</strong> 插件版本小于2022.2.3的在 table 控件编辑某个值的时候，需要在编辑完值后<mark>先在空白处点一下</mark>，再发送请求，该问题在 2022.2.3+版本得到修复</p><h2 id="q-为啥插件没反应" tabindex="-1"><a class="header-anchor" href="#q-为啥插件没反应" aria-hidden="true">#</a> Q: 为啥插件没反应</h2>',7),B=a("strong",null,"A:",-1),P=i(`<h2 id="q-点击图标后-idea-卡死" tabindex="-1"><a class="header-anchor" href="#q-点击图标后-idea-卡死" aria-hidden="true">#</a> Q: 点击图标后 idea 卡死</h2><p><strong>A:</strong> 你设计的实体类嵌套递归，插件不支持，比如说 A 实体类有 B 实体类的属性，B 实体类有 A 实体类的属性</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">B</span> b<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> xx<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">A</span> a<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> xx<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>以上这种情况如果你不需要 B 属性，那么你可以在生成的时候手动给 B 加一个 static 属性</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">B</span> b<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> xx<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,5);function I(Q,j){const o=r("Badge"),t=r("router-link"),l=r("RouterLink");return u(),h("div",null,[a("blockquote",null,[g,e(o,{text:"S: 技巧",color:"#087CFA"}),s(),e(o,{text:"Q: 问题",color:"#FE2857"}),s(),e(o,{text:"A: 答案",color:"#21D789"}),s(),f,x]),a("nav",m,[a("ul",null,[a("li",null,[e(t,{to:"#s-url-错误"},{default:n(()=>[s("S: Url 错误")]),_:1})]),a("li",null,[e(t,{to:"#s-解析如何忽略某个字段"},{default:n(()=>[s("S: 解析如何忽略某个字段")]),_:1})]),a("li",null,[e(t,{to:"#s-快速定位"},{default:n(()=>[s("S: 快速定位")]),_:1})]),a("li",null,[e(t,{to:"#s-多文件上传"},{default:n(()=>[s("S: 多文件上传")]),_:1})]),a("li",null,[e(t,{to:"#s-body-中想直接传-text"},{default:n(()=>[s("S: Body 中想直接传 text")]),_:1})]),a("li",null,[e(t,{to:"#s-没有-controller-如何发送请求"},{default:n(()=>[s("S: 没有 Controller，如何发送请求")]),_:1})]),a("li",null,[e(t,{to:"#s-api文档同步"},{default:n(()=>[s("S: API文档同步")]),_:1})]),a("li",null,[e(t,{to:"#s-apis回显"},{default:n(()=>[s("S: APIs回显")]),_:1})]),a("li",null,[e(t,{to:"#q-左侧图标不显示"},{default:n(()=>[s("Q: 左侧图标不显示")]),_:1})]),a("li",null,[e(t,{to:"#q-输入参数后调用-api-发现无效"},{default:n(()=>[s("Q: 输入参数后调用 API 发现无效")]),_:1})]),a("li",null,[e(t,{to:"#q-为啥插件没反应"},{default:n(()=>[s("Q: 为啥插件没反应")]),_:1})]),a("li",null,[e(t,{to:"#q-点击图标后-idea-卡死"},{default:n(()=>[s("Q: 点击图标后 idea 卡死")]),_:1})])])]),v,b,e(o,{text:"解决办法",type:"tip"}),y,a("p",null,[s("考虑使用"),e(l,{to:"/guide/features/commonHeader.html"},{default:n(()=>[s("常用头参数")]),_:1}),s("快速添加")]),q,a("p",null,[s("参考"),e(l,{to:"/guide/features/tempRequest.html"},{default:n(()=>[s("临时请求")]),_:1})]),w,a("p",null,[s("针对保存后的api，又进行了修改，那么你需要手动补参数并保存。如果你完全不想要之前的参数了，直接点击"),A,s("("),e(l,{to:"/guide/features/regenerate.html"},{default:n(()=>[s("重新生成")]),_:1}),s(")")]),S,a("p",null,[B,s(" 请先完善配置，参考"),e(l,{to:"/guide/getstarted/start.html"},{default:n(()=>[s("快速开始")]),_:1}),s("，再点击图标")]),P])}const R=p(k,[["render",I],["__file","faq.html.vue"]]);export{R as default};
